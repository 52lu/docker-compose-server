version: '3'

networks:
  backend:
    driver: ${NETWORKS_DRIVER}

volumes:
  mysql:
    driver: ${VOLUMES_DRIVER}
  memcached:
    driver: ${VOLUMES_DRIVER}
  redis:
    driver: ${VOLUMES_DRIVER}
  mongo:
    driver: ${VOLUMES_DRIVER}
  elasticsearch:
    driver: ${VOLUMES_DRIVER}
  postgres:
    driver: ${VOLUMES_DRIVER}

services:

  ################# Workspace Utilities ##################################
  workspace:
    build:
      context: ./workspace
      args:
        - PHP_VERSION=${PHP_VERSION}
    volumes:
      - ${APP_CODE_PATH_HOST}:${APP_CODE_PATH_CONTAINER}${APP_CODE_CONTAINER_FLAG}
    extra_hosts:
      - "dockerhost:${DOCKER_HOST_IP}"
    ports:
      - "${WORKSPACE_SSH_PORT}:22"
      - "${WORKSPACE_PORT_LIST}:8010-8020"
    tty: true
    environment:
      - PHP_IDE_CONFIG=${PHP_IDE_CONFIG}
    #      - DOCKER_HOST=tcp://docker-in-docker:2375
    networks:
      - backend
  #    links:
  #      - docker-in-docker

  ################# PHP-FPM ##############################################
  php-fpm:
    build:
      context: .
      dockerfile: ./php-fpm/Dockerfile
      args:
        - PHP_VERSION=${PHP_VERSION}
    volumes:
      - ./php-fpm/php${PHP_VERSION}.ini:/usr/local/etc/php/php.ini
      - ./php-fpm/xdebug.ini:/usr/local/etc/php/conf.d/xdebug.ini
      - ./php-fpm/laravel.ini:/usr/local/etc/php/conf.d/laravel.ini
      - ./php-fpm/opcache.ini:/usr/local/etc/php/conf.d/opcache.ini
      - ./php-fpm/xlaravel.pool.conf:/usr/local/etc/php-fpm.d/xlaravel.pool.conf
      - ${APP_CODE_PATH_HOST}:${APP_CODE_PATH_CONTAINER}${APP_CODE_CONTAINER_FLAG}
    expose:
      - "9000"
    extra_hosts:
      - "dockerhost:${DOCKER_HOST_IP}"
    environment:
      - PHP_IDE_CONFIG=${PHP_IDE_CONFIG}
      - TZ=${TIME_ZONE}
    #      - DOCKER_HOST=tcp://docker-in-docker:2375
    #      - FAKETIME=${PHP_FPM_FAKETIME}
    depends_on:
      - workspace
    networks:
      - backend
    cap_add:
      - NET_ADMIN
    privileged: true
  #    links:
  #      - docker-in-docker

  ################# NGINX Server #########################################
  nginx:
    build:
      context: ./nginx
      args:
        - CHANGE_SOURCE=${CHANGE_SOURCE}
        - PHP_UPSTREAM_CONTAINER=${NGINX_PHP_UPSTREAM_CONTAINER}
        - PHP_UPSTREAM_PORT=${NGINX_PHP_UPSTREAM_PORT}
        - http_proxy
        - https_proxy
        - no_proxy
    volumes:
      - ${APP_CODE_PATH_HOST}:${APP_CODE_PATH_CONTAINER}${APP_CODE_CONTAINER_FLAG}
      - ${NGINX_HOST_LOG_PATH}:/var/log/nginx
      - ${NGINX_SITES_PATH}:/etc/nginx/sites-available
      - ${NGINX_SSL_PATH}:/etc/nginx/ssl
      - ${NGINX_EXTEND_PATH}:/etc/nginx/extend
      - ${NGINX_FASTCGI_PARAM}:/etc/nginx/fastcgi_params
    ports:
      - "${NGINX_HOST_HTTP_PORT}:80"
      - "${NGINX_HOST_HTTPS_PORT}:443"
    depends_on:
      - php-fpm
    networks:
      - backend

  ################# MySQL ################################################
  mysql:
    build:
      context: ./mysql
      args:
        - MYSQL_VERSION=${MYSQL_VERSION}
    environment:
      - MYSQL_DATABASE=${MYSQL_DATABASE}
      - MYSQL_USER=${MYSQL_USER}
      - MYSQL_PASSWORD=${MYSQL_PASSWORD}
      - MYSQL_ROOT_PASSWORD=${MYSQL_ROOT_PASSWORD}
      - TZ=${TIME_ZONE}
    volumes:
      - ${DATA_PATH_HOST}/mysql:/var/lib/mysql
      - ${MYSQL_ENTRYPOINT_INITDB}:/docker-entrypoint-initdb.d
    ports:
      - "${MYSQL_PORT}:3306"
    networks:
      - backend

  ################# MongoDB ##############################################
  mongo:
    build: ./mongo
    ports:
      - "${MONGODB_PORT}:27017"
    volumes:
      - ${DATA_PATH_HOST}/mongo:/data/db
      - ${DATA_PATH_HOST}/mongo_config:/data/configdb
    networks:
      - backend
  ################# Redis ################################################
  redis:
    build: ./redis
    volumes:
      - ${DATA_PATH_HOST}/redis:/data
    ports:
      - "${REDIS_PORT}:6379"
    networks:
      - backend

  ################# Memcached ############################################
  memcached:
    build: ./memcached
    volumes:
      - ${DATA_PATH_HOST}/memcached:/var/lib/memcached
    ports:
      - "${MEMCACHED_HOST_PORT}:11211"
    depends_on:
      - php-fpm
    networks:
      - backend
  ################# RabbitMQ #############################################
  rabbitmq:
    build: ./rabbitmq
    ports:
      - "${RABBITMQ_NODE_HOST_PORT}:5672"
      - "${RABBITMQ_MANAGEMENT_HTTP_HOST_PORT}:15672"
      - "${RABBITMQ_MANAGEMENT_HTTPS_HOST_PORT}:15671"
    privileged: true
    environment:
      - RABBITMQ_DEFAULT_USER=${RABBITMQ_DEFAULT_USER}
      - RABBITMQ_DEFAULT_PASS=${RABBITMQ_DEFAULT_PASS}
    hostname: laradock-rabbitmq
    volumes:
      - ${DATA_PATH_HOST}/rabbitmq:/var/lib/rabbitmq
    depends_on:
      - php-fpm
    networks:
      - backend

  ################# ElasticSearch ########################################
  elasticsearch:
    build:
      context: ./elasticsearch
      args:
        - ELK_VERSION=${ELK_VERSION}
    volumes:
      - elasticsearch:/usr/share/elasticsearch/data
    environment:
      - cluster.name=laradock-cluster
      - node.name=laradock-node
      - bootstrap.memory_lock=true
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
      - cluster.initial_master_nodes=laradock-node
    ulimits:
      memlock:
        soft: -1
        hard: -1
    ports:
      - "${ELASTICSEARCH_HOST_HTTP_PORT}:9200"
      - "${ELASTICSEARCH_HOST_TRANSPORT_PORT}:9300"
    depends_on:
      - php-fpm
    networks:
      - backend

  ################# Logstash ###########################################
  logstash:
    build:
      context: ./logstash
      args:
        - ELK_VERSION=${ELK_VERSION}
    volumes:
      - './logstash/config/logstash.yml:/usr/share/logstash/config/logstash.yml'
      - './logstash/pipeline:/usr/share/logstash/pipeline'
    ports:
      - '5001:5001'
    environment:
      LS_JAVA_OPTS: '-Xmx1g -Xms1g'
    env_file:
      - .env
    networks:
      - backend
    depends_on:
      - elasticsearch

  ################# Kibana ##############################################
  kibana:
    build:
      context: ./kibana
      args:
        - ELK_VERSION=${ELK_VERSION}
    ports:
      - "${KIBANA_HTTP_PORT}:5601"
    depends_on:
      - elasticsearch
    networks:
      - backend

  ################# Grafana ###############################################
  grafana:
    build:
      context: ./grafana
    volumes:
      - ${DATA_PATH_HOST}/grafana:/var/lib/grafana
    ports:
      - "${GRAFANA_PORT}:3000"
    networks:
      - backend
  ################# Docker-in-Docker ################################################
  docker-in-docker:
    image: docker:dind
    privileged: true
    volumes:
      - ${APP_CODE_PATH_HOST}:${APP_CODE_PATH_CONTAINER}
      - ${DATA_PATH_HOST}/dind:/var/lib/docker
    expose:
      - 2375
    networks:
      - backend

  ################# rocket-mq-server ################################################
  rocketmq:
    build:
      context: ./rocketmq
      args:
        - ROCKETMQ_VERSION=${ROCKETMQ_VERSION}
    volumes:
      - ${ROCKET_LOGS}:/opt/logs
      - ${ROCKET_STORE}:/opt/store
    ports:
      - "${ROCKET_SERVER_PORT}:9876"
    environment:
      JAVA_OPT_EXT: "-Duser.home=/opt -Xms512M -Xmx512M -Xmn128m"
      MAX_POSSIBLE_HEAP: 100000000
    depends_on:
      - rocketmq-broker
      - rocketmq-console
    networks:
      - backend
  ################# rocket-mq-broker ################################################
  rocketmq-broker:
    build:
      context: ./rocketmq/broker
      args:
        - LOCAL_HOST_IP=${DOCKER_HOST_IP}
        - ROCKETMQ_VERSION=${ROCKETMQ_VERSION}
    volumes:
      - ${ROCKET_LOGS}:/opt/logs
      - ${ROCKET_STORE}:/opt/store
      - ${ROCKET_BROKER_CONFIG}:/opt/rocketmq/conf/broker.conf
    ports:
      - 10909:10909
      - 10911:10911
      - 10912:10912
    command: sh mqbroker -n rocketmq:9876 -c /opt/rocketmq/conf/broker.conf
    environment:
      - JAVA_HOME=/usr/lib/jvm/jre
    networks:
      - backend
  ################# rocket-mq-console ################################################
  rocketmq-console:
    image: styletang/rocketmq-console-ng
    ports:
      - 8087:8080
    environment:
      - JAVA_OPTS= -Dlogging.level.root=debug   -Drocketmq.namesrv.addr=rocketmq:9876
      - Dcom.rocketmq.sendMessageWithVIPChannel=false
    networks:
      - backend
  ################# pulsar ################################################
  pulsar:
    build:
      context: ./pulsar/server
      args:
        - PULSAR_VERSION=${PULSAR_VERSION}
        - DOCKER_HOST_IP=${DOCKER_HOST_IP}
    ports:
      - ${PULSAR_HTTP_PORT}:8080
      - ${PULSAR_PORT}:6650
    volumes:
      - ${DATA_PATH_HOST}/pulsar:/pulsar/data
    #      - ${APP_PATH}/pulsar/server/config:/pulsar/conf
    depends_on:
      - pulsar-manage
    networks:
      - backend

  ################# pulsar-manage ################################################
  pulsar-manage:
    build:
      context: ./pulsar/manager
      args:
        - PULSAR_MANAGER_VERSION=${PULSAR_MANAGER_VERSION}
    volumes:
      - ${SPRING_CONFIGURATION_FILE}:/pulsar-manager/pulsar-manager/application.properties
    ports:
      - "9527:9527"
      - "7750:7750"
    environment:
      SPRING_CONFIGURATION_FILE: /pulsar-manager/pulsar-manager/application.properties
    networks:
      - backend
  ### consul ##################################
  consul:
    build:
      context: ./consul
      args:
        - CONSUL_VERSION=${CONSUL_VERSION}
    container_name: consul-${CONSUL_VERSION}
    volumes:
      - ${DATA_PATH_HOST}/consul:/consul/data
    environment:
      - TZ=${TIME_ZONE}
    ports:
      - "8300-8302:8300-8302"
      - "8500:8500"
      - "8600:8600"
    networks:
      - backend
  ### prometheus ################################################
  prometheus:
    build:
      context: ./prometheus
    volumes:
      - ./prometheus:/etc/prometheus/
      - ${DATA_PATH_HOST}/prometheus:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
    ports:
      - "${PROMETHEUS_PORT}:9090"
  ### Zipkin ##############################################
  zipkin:
    build: ./zipkin
    container_name: zipkin
    ports:
      - "${ZIPKIN_PORT}:9411"
    environment:
      - STORAGE_TYPE=${ZIPKIN_STORAGE_TYPE}
      - MYSQL_DB=${ZIPKIN_MYSQL_DB}
      - MYSQL_USER=${ZIPKIN_MYSQL_USER}
      - MYSQL_PASS=${ZIPKIN_MYSQL_PASS}
      - MYSQL_HOST=${ZIPKIN_MYSQL_HOST}
      - MYSQL_TCP_PORT=${ZIPKIN_MYSQL_TCP_PORT}
      - ZIPKIN_VERSION=${ZIPKIN_VERSION}
      - TZ=${TIME_ZONE}
  ### hyperf ##############################################
  hyperf:
    build:
      context: ./hyperf
      args:
        - HYPERF_COMPOSER_VERSION=${HYPERF_COMPOSER_VERSION}
        - HYPERF_ALPINE_VERSION=${HYPERF_ALPINE_VERSION}
        - HYPERF_PHP_VERSION=${HYPERF_PHP_VERSION}
    ports:
      - "${HYPERF_PORT_LIST}:${HYPERF_PORT_LIST}"
    tty: true
    volumes:
      - ${APP_CODE_PATH_HOST}:${APP_CODE_PATH_CONTAINER}${APP_CODE_CONTAINER_FLAG}
    environment:
      - PHP_IDE_CONFIG=${PHP_IDE_CONFIG}
    networks:
      - backend
    ### pyroscope ##############################################
  pyroscope:
    build:
      context: ./pyroscope
      args:
        - PYROSCOPE_VERSION=${PYROSCOPE_VERSION}
    ports:
      - ${PYROSCOPE_PORT}:4040
    networks:
      - backend
  ### horod ##############################################
  hotrod:
    build:
      context: ./hotrod
      args:
        - HOTROD_VERSION=${HOTROD_VERSION}
    environment:
      - JAEGER_AGENT_HOST=jaeger
      # Note: if your application is using Node.js Jaeger Client, you need port 6832,
      #       unless issue https://github.com/jaegertracing/jaeger/issues/1596 is resolved.
      - JAEGER_AGENT_PORT=6831
    ports:
      - "${HOTROD_PORT}:8080"
    depends_on:
      - jaeger
    networks:
      - backend
  ### jaeger ##############################################
  jaeger:
    build:
      context: ./jaeger
      args:
        - JAEGER_VERSION:${JAEGER_VERSION}
    environment:
      - COLLECTOR_ZIPKIN_HTTP_PORT=9411
    ports:
      - "5775:5775/udp"
      - "6831:6831/udp"
      - "6832:6832/udp"
      - "5778:5778"
      - "16686:16686"
      - "14268:14268"
      - "9411:9411"
    networks:
      - backend
  ### ETCD #################################################
  etcd:
    build:
      context: ./etcd
      args:
        - ETCD_VERSION=${ETCD_VERSION}
    volumes:
      - ${DATA_PATH_HOST}/etcd:/bitnami/etcd
    ports:
      - "${ETCD_PORT}:2379"
      - "2380:2380"
    environment:
      - ALLOW_NONE_AUTHENTICATION=yes
      - ETCD_ADVERTISE_CLIENT_URLS=http://etcd:2379
    networks:
      - backend

    ### SWAGGER EDITOR ############################################
  swagger-editor:
    build: ./swagger-editor
    ports:
      - ${SWAGGER_EDITOR_PORT}:8080
    networks:
      - backend

    ### SWAGGER UI ################################################
  swagger-ui:
    build: ./swagger-ui
    environment:
      - API_URL=${SWAGGER_API_URL}
    ports:
      - ${SWAGGER_UI_PORT}:8080
    networks:
      - backend
  ### chineseocr ################################################
  chineseocr:
    build: ./chineseocr
    tty: true
    command: sh /data/init.sh
    restart: always
    environment:
      - TZ=${TIME_ZONE}
    ports:
      - ${OCR_SERVER_PORT}:8089
    volumes:
      - ${DATA_PATH_HOST}/ocrlog:/data/chineseocr_lite/backend/logs
    networks:
      - backend